// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var RelatedPlugin, _ref;
    return RelatedPlugin = (function(_super) {
      __extends(RelatedPlugin, _super);

      function RelatedPlugin() {
        _ref = RelatedPlugin.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      RelatedPlugin.prototype.name = 'related';

      RelatedPlugin.prototype.config = {
        parentCollectionName: 'html'
      };

      RelatedPlugin.prototype.howManyItemsInside = function(aArray, bArray) {
        var aItem, bItem, count, _i, _j, _len, _len1;
        count = 0;
        for (_i = 0, _len = aArray.length; _i < _len; _i++) {
          aItem = aArray[_i];
          for (_j = 0, _len1 = bArray.length; _j < _len1; _j++) {
            bItem = bArray[_j];
            if (aItem === bItem) {
              ++count;
              break;
            }
          }
        }
        return count;
      };

      RelatedPlugin.prototype.extendTemplateData = function(opts) {
        var _base;
        if ((_base = opts.templateData).getRelatedDocuments == null) {
          _base.getRelatedDocuments = function(document) {
            var documentModel, _ref1, _ref2;
            if (document == null) {
              document = this.document;
            }
            if (document.id === ((_ref1 = this.documentModel) != null ? _ref1.id : void 0)) {
              documentModel = this.documentModel;
            } else {
              documentModel = this.getFileById(document.id);
            }
            return ((_ref2 = documentModel.relatedDocuments) != null ? _ref2.toJSON() : void 0) || [];
          };
        }
        return this;
      };

      RelatedPlugin.prototype.extendCollections = function(opts) {
        var collection, config, docpad, plugin;
        plugin = this;
        config = this.getConfig();
        docpad = this.docpad;
        collection = docpad.getCollection(config.parentCollectionName).on('add change:tags', function(document) {
          var relatedDocuments, tags;
          tags = document.get('tags') || [];
          relatedDocuments = collection.findAllLive({
            tags: {
              '$in': tags
            },
            id: {
              $ne: document.id
            }
          }).setComparator(function(a, b) {
            return plugin.howManyItemsInside(a, tags) < plugin.howManyItemsInside(b, tags);
          });
          return document.relatedDocuments = relatedDocuments;
        }).on('remove', function(document) {
          var _ref1;
          if ((_ref1 = document.relatedDocuments) != null) {
            _ref1.destroy();
          }
          return document.relatedDocuments = null;
        });
        return this;
      };

      return RelatedPlugin;

    })(BasePlugin);
  };

}).call(this);
