// Generated by CoffeeScript 1.6.3
(function() {
  var exec, safe, spawn, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ref = require('child_process'), exec = _ref.exec, spawn = _ref.spawn;

  safe = function(next, fn) {
    if (fn == null) {
      fn = next;
    }
    return function(err) {
      if (err === 0) {
        err = null;
      } else if (err > 0) {
        err = new Error('docpad-plugin-cmds exited with the error code: ' + err);
      }
      if (err) {
        return next(err);
      }
      return fn();
    };
  };

  module.exports = function(BasePlugin) {
    var CmdsPlugin, TaskGroup, pathUtil, supportedExts, util;
    pathUtil = require('path');
    util = require('util');
    TaskGroup = require('taskgroup').TaskGroup;
    supportedExts = ["sh", "bash"];
    if (process.platform.indexOf('win') === 0) {
      supportedExts.push("ps1");
      supportedExts.push("cmd");
    }
    return CmdsPlugin = (function(_super) {
      __extends(CmdsPlugin, _super);

      CmdsPlugin.prototype.name = 'cmds';

      CmdsPlugin.prototype.config = {
        collectionName: "shell",
        shellPath: "shell",
        psPath: 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell'
      };

      CmdsPlugin.prototype.locale = {
        addingShell: "Adding shell item: %s"
      };

      function CmdsPlugin() {
        var config, docpadConfig;
        CmdsPlugin.__super__.constructor.apply(this, arguments);
        docpadConfig = this.docpad.getConfig();
        config = this.getConfig();
        if (!util.isArray(config.shellPath)) {
          config.shellPath = [config.shellPath];
        }
        config.shellPath.forEach(function(shellPath, index) {
          config.shellPath[index] = pathUtil.resolve(docpadConfig.srcPath, shellPath);
        });
      }

      CmdsPlugin.prototype.setConfig = function() {
        var config, docpadConfig;
        CmdsPlugin.__super__.setConfig.apply(this, arguments);
        docpadConfig = this.docpad.getConfig();
        config = this.getConfig();
        if (!util.isArray(config.shellPath)) {
          config.shellPath = [config.shellPath];
        }
        config.shellPath.forEach(function(shellPath, index) {
          config.shellPath[index] = pathUtil.resolve(docpadConfig.srcPath, shellPath);
        });
        return this;
      };

      CmdsPlugin.prototype.renderCommands = function(opts, next) {
        var args, cmdOptions, command, file, inExtension, instance, key, meta, renderedContent, value, _ref1;
        inExtension = opts.inExtension, file = opts.file;
        spawn = require('child_process').spawn;
        args = [];
        command = inExtension;
        if (inExtension === 'cmd') {
          args.push("/C");
        } else if (inExtension === "ps1") {
          command = this.config.psPath;
          args.push("-Command");
        } else {
          args.push("-c");
        }
        args.push(opts.content);
        renderedContent = "";
        cmdOptions = {
          cwd: docpad.config.rootPath,
          env: process.env
        };
        meta = file.toJSON();
        for (key in meta) {
          value = meta[key];
          cmdOptions.env["DOCUMENT_" + key.toUpperCase()] = value;
        }
        _ref1 = docpad.config;
        for (key in _ref1) {
          value = _ref1[key];
          cmdOptions.env["DOCPAD_CONFIG_" + key.toUpperCase()] = value;
        }
        instance = spawn(command, args, cmdOptions);
        instance.stdout.on('data', function(data) {
          renderedContent += data.toString();
        });
        instance.stderr.on('data', function(data) {
          console.error("Error in shell script:", file.get("fullPath"));
          console.error(data.toString());
        });
        instance.on('close', safe(next, function() {
          opts.content = renderedContent;
          if (file.get("print")) {
            console.log(renderedContent);
          }
          next();
        }));
      };

      CmdsPlugin.prototype.executeEvent = function(opts, next) {
        var config, me, query, shellCollection, tasks, whenCollection;
        config = this.getConfig();
        shellCollection = this.docpad.getCollection(config.collectionName);
        if (shellCollection.length === 0) {
          next();
          return this;
        }
        query = {
          when: opts.when
        };
        whenCollection = shellCollection.findAll(query);
        if (whenCollection.length === 0) {
          next();
          return this;
        }
        whenCollection.sortCollection({
          relativePath: 1
        });
        tasks = new TaskGroup();
        tasks.on("complete", function(err) {
          next(err);
        });
        me = this;
        whenCollection.models.forEach(function(model) {
          return tasks.addTask("docpad-plugin-cmds: " + (model.get('fullPath')), function(taskComplete) {
            var renderOpts;
            renderOpts = {
              file: model,
              inExtension: model.get('extension'),
              content: model.get('content')
            };
            me.renderCommands(renderOpts, taskComplete);
          });
        });
        tasks.run();
        return this;
      };

      CmdsPlugin.prototype.render = function(opts, next) {
        var inExtension, outExtension;
        inExtension = opts.inExtension, outExtension = opts.outExtension;
        if (__indexOf.call(supportedExts, inExtension) >= 0) {
          this.renderCommands(opts, next);
        } else {
          next();
        }
        return this;
      };

      CmdsPlugin.prototype.populateCollections = function(opts, next) {
        var config, docpad, processed;
        config = this.config;
        docpad = this.docpad;
        processed = config.shellPath.length;
        config.shellPath.forEach(function(shellPath, index) {
          return docpad.parseDocumentDirectory({
            path: shellPath
          }, function(err, results) {
            processed--;
            if (err || processed === 0) {
              return next(err);
            }
          });
        });
        return this;
      };

      CmdsPlugin.prototype.extendCollections = function(opts) {
        var config, database, docpad, locale;
        config = this.getConfig();
        docpad = this.docpad;
        locale = this.locale;
        database = docpad.getDatabase();
        docpad.setCollection(config.collectionName, database.createLiveChildCollection().setQuery('isShell', {
          extension: {
            $in: supportedExts
          },
          fullPath: {
            $startsWith: config.shellPath
          }
        }).sortCollection({
          relativePath: 1
        }).on('add', function(model) {
          var whenEvent;
          docpad.log('debug', util.format(locale.addingShell, model.getFilePath()));
          whenEvent = model.get("when");
          return model.setDefaults({
            render: whenEvent && whenEvent !== "render" ? false : true,
            write: false,
            renderSingleExtensions: true
          });
        }));
        return this;
      };

      CmdsPlugin.prototype.renderBefore = function(opts, next) {
        return this.executeEvent({
          when: "renderBefore"
        }, next);
      };

      CmdsPlugin.prototype.renderAfter = function(opts, next) {
        return this.executeEvent({
          when: "renderAfter"
        }, next);
      };

      CmdsPlugin.prototype.writeBefore = function(opts, next) {
        return this.executeEvent({
          when: "writeBefore"
        }, next);
      };

      CmdsPlugin.prototype.writeAfter = function(opts, next) {
        return this.executeEvent({
          when: "writeAfter"
        }, next);
      };

      CmdsPlugin.prototype.generateBefore = function(opts, next) {
        return this.executeEvent({
          when: "generateBefore"
        }, next);
      };

      CmdsPlugin.prototype.generateAfter = function(opts, next) {
        return this.executeEvent({
          when: "generateAfter"
        }, next);
      };

      return CmdsPlugin;

    })(BasePlugin);
  };

}).call(this);
